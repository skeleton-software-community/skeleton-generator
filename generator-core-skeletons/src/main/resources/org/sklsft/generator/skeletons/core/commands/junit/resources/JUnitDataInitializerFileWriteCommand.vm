package ${project.model.junitPackageName};

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javax.sql.DataSource;

import org.sklsft.commons.api.exception.TechnicalError;
import org.sklsft.generator.bl.services.impl.JunitPopulator;
import org.sklsft.generator.bl.services.interfaces.ProjectLoader;
import org.sklsft.generator.bl.services.interfaces.ProjectMetaDataService;
import org.sklsft.generator.model.domain.Project;
import org.sklsft.generator.model.metadata.ProjectMetaData;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class JUnitDataInitializer {

	/*
	 * logger
	 */
	private final Logger logger = LoggerFactory.getLogger(JUnitDataInitializer.class);
	
	private static final String TRUNCATE_SHEMA_SCRIPT = "TRUNCATE SCHEMA PUBLIC RESTART IDENTITY AND COMMIT NO CHECK";
	private static final String CREATE_NORMALIZE_FUNCTION = "CREATE FUNCTION normalize(CHAR VARYING(255))"
																		+ " RETURNS CHAR VARYING(255)"
																		+ " LANGUAGE JAVA DETERMINISTIC NO SQL"
																		+ " EXTERNAL NAME 'CLASSPATH:org.sklsft.commons.text.StringUtils.normalize'";
	
	private boolean initialized = false;
	private Project project;
	
	@Autowired
	private JunitPopulator populator;
	
	@Autowired
	private DataSource dataSource;
	
	@Autowired
	private ProjectMetaDataService projectMetaDataService;
	
	@Autowired
	private ProjectLoader projectLoader;

	

	public void initialize(String... packages) {

		if (initialized) {
			cleanDatabase();
		} else {
			createNormalizeFunction();
			logger.info("start loading project");
			ProjectMetaData projectMetaData = projectMetaDataService.loadProjectMetaData("..");
			project = projectLoader.loadProject(projectMetaData);
			logger.info("loading project " + project.projectName + " completed");
		}

		logger.info("Initializing data");
		Set<String> packs = new HashSet<>(Arrays.asList(packages));		
		populator.populate(project, packs, "src/test/resources/junit/data");		
		logger.info("completed");

		initialized = true;
	}
	
	
	private void cleanDatabase() {

		try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement();) {
			statement.execute(TRUNCATE_SHEMA_SCRIPT);
		} catch (SQLException e) {
			throw new TechnicalError(TechnicalError.ERROR_UNKNOWN, e);
		}
	}
	
	private void createNormalizeFunction() {

		try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement();) {			
			statement.execute(CREATE_NORMALIZE_FUNCTION);
		} catch (SQLException e) {
			logger.error(e.getMessage(), e);
		}
	}
}
